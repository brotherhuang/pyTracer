from pytracer import *from pytracer.geometry import (Vector, Point)from pytracer.transform import (Transform, AnimatedTransform)from pytracer.shape import (Sphere, Disk, create_triangle_mesh, create_loop_subdiv)from pytracer.aggregate import (SimpleAggregate, GeometricPrimitive, GridAccel)from pytracer.texture import ConstantTexturefrom pytracer.material import (MatteMaterial, UberMaterial, MeasuredMaterial)from pytracer.light import (SpotLight, DiffuseAreaLight, InfiniteAreaLight)from pytracer.scene import Scenefrom pytracer.sampler import StratifiedSamplerfrom pytracer.filter import (BoxFilter, LanczosSincFilter)from pytracer.film import ImageFilmfrom pytracer.camera import (PinholeCamera, OrthoCamera, PerspectiveCamera)from pytracer.integrator import (PathIntegrator, DirectLightingIntegrator, WhittedIntegrator)from pytracer.renderer import SamplerRendererfrom examples.head_model import model as head_modelprint("Dependencies loaded")x_res = 15y_res = 15spp_x = 1spp_y = 1file = 'test_5.png'np.random.seed(1)# camerafil = BoxFilter(.5, .5)film = ImageFilm(x_res, y_res, fil, [0., 1., 0., 1.], file)c_trans = Transform.look_at(Point(0., 0., 4.7), Point(0., 0., 0.), Vector(0., 1., 0.))cam_trans = AnimatedTransform(c_trans, 0., c_trans, 0.)camera = PerspectiveCamera(cam_trans, [0., 1., 0., 1.], 0., 0., 0., 1e30, 22., film)print("Camera assembled")# samplersampler = StratifiedSampler(0, x_res, 0, y_res, spp_x, spp_y, True, 0., 0.)print("Sampler built")# surface integratorsurf_int = DirectLightingIntegrator()  #PathIntegrator()print("Integrator initialized")# lightsmain_trans = Transform.rotate(180., Vector(0., 1., 0.)) * Transform.translate(Vector(.5, 3., 4.3))main_shape = Disk(main_trans, main_trans.inverse(),False, 0., 1.5, 0., 360.)ls = Sphere(main_trans, main_trans.inverse(), False, 1.5, -1.5, 1.5, 360.)main_light = DiffuseAreaLight(main_trans, Spectrum([10., 10., 10.]), 2, main_shape)lights = [main_light]print("Lights built")# shape# Backdropback_param = {	'indices': [0, 1, 2, 2, 0, 3],	'P': [-10, 0, -10, 10, 0, -10, 10, 9, -10, -10, 9, -10]}back_Kd = ConstantTexture(Spectrum([.1, .1, .1]))back_sigma = ConstantTexture(0.)back_mat = MatteMaterial(back_Kd, back_sigma)back_trans = Transform.translate(Vector(0., -5., 0.))back_shape = create_triangle_mesh(back_trans, back_trans.inverse(), False, back_param)back = GeometricPrimitive(back_shape, back_mat)# tmp = create_loop_subdiv(back_trans, back_trans.inverse(),False, back_param)Kd = ConstantTexture(Spectrum([1., 1., 1.]))Ks = ConstantTexture(Spectrum([.5, .5, .5]))Kr = ConstantTexture(Spectrum([0., 0., 0.]))Kt = ConstantTexture(Spectrum([0., 0., 0.]))roughness = ConstantTexture(0.1)opacity = ConstantTexture(1.)eta = ConstantTexture(1.5)head_trans = Transform.scale(.1, .1, .1) * Transform.rotate(180, Vector(0., 1., 0.)) * Transform.translate(Vector(0., -.2, 0.))head_mat = UberMaterial(Kd, Ks, Kr, Kt, roughness, opacity, eta)head_shape = create_triangle_mesh(head_trans, head_trans.inverse(), False, head_model)head = GeometricPrimitive(head_shape, head_mat)# aggaggs = SimpleAggregate([head], True)print("Aggregates built")# scenescene = Scene(aggs, lights, None)print("Scene constructed")renderer = SamplerRenderer(sampler, camera, surf_int, None)print("Renderer built, proceed to render...")renderer.render(scene)